

def identify_top_features(results, layers, N=5):
    """
    Compute effect sizes and return the top N dimensions most associated
    with harmful (positive d) and harmless (negative d) prompts.
    """
    records = []
    for layer_idx, layer in enumerate(layers):
        stats = results[layer_idx]
        # print(stats)
        harmful = stats["stats"]["harmful_reps"]
        harmless = stats["stats"]["harmless_reps"]
        # compute Cohen's d
        n_h, latent_dim = harmful.shape
        n_c, _ = harmless.shape
        mu_h = harmful.mean(axis=0)
        mu_c = harmless.mean(axis=0)
        var_h = harmful.var(axis=0, ddof=1)
        var_c = harmless.var(axis=0, ddof=1)
        pooled = np.sqrt(((n_h-1)*var_h + (n_c-1)*var_c) / (n_h + n_c - 2))
        pooled[pooled == 0] = np.nan
        d = (mu_h - mu_c) / pooled
        d = np.nan_to_num(d)
        # collect per-dimension
        for dim, val in enumerate(d):
            records.append({
                "layer": layer,
                "latent_dim": dim,
                "Cohen's d": val
            })
