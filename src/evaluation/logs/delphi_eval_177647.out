=== Running EXP-smollm2-sparsify-PRE-50M-token-6_25-layers-32-expansion-64-k-layer-25 ===
Resolving path for hookpoint: layers.25
Files found in /home/tilman.kerl/mech-interp/src/evaluation/results/EXP-smollm2-sparsify-PRE-50M-token-6_25-layers-32-expansion-64-k-layer-25/latents, skipping...
Skipping neighbour creation
INFO 06-26 14:41:21 __init__.py:207] Automatically detected platform cuda.
INFO 06-26 14:41:28 config.py:549] This model supports multiple tasks: {'reward', 'classify', 'score', 'generate', 'embed'}. Defaulting to 'generate'.
INFO 06-26 14:41:28 awq_marlin.py:114] The model is convertible to awq_marlin during runtime. Using awq_marlin kernel.
INFO 06-26 14:41:28 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.3) with config: model='hugging-quants/Meta-Llama-3.1-70B-Instruct-AWQ-INT4', speculative_config=None, tokenizer='hugging-quants/Meta-Llama-3.1-70B-Instruct-AWQ-INT4', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=5120, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=awq_marlin, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=hugging-quants/Meta-Llama-3.1-70B-Instruct-AWQ-INT4, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=True, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 06-26 14:41:29 cuda.py:229] Using Flash Attention backend.
INFO 06-26 14:41:29 model_runner.py:1110] Starting to load model hugging-quants/Meta-Llama-3.1-70B-Instruct-AWQ-INT4...
INFO 06-26 14:41:29 weight_utils.py:254] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/9 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  11% Completed | 1/9 [00:03<00:29,  3.63s/it]
Loading safetensors checkpoint shards:  22% Completed | 2/9 [00:07<00:27,  3.96s/it]
Loading safetensors checkpoint shards:  33% Completed | 3/9 [00:11<00:24,  4.04s/it]
Loading safetensors checkpoint shards:  44% Completed | 4/9 [00:16<00:20,  4.07s/it]
Loading safetensors checkpoint shards:  56% Completed | 5/9 [00:19<00:16,  4.02s/it]
Loading safetensors checkpoint shards:  67% Completed | 6/9 [00:22<00:10,  3.55s/it]
Loading safetensors checkpoint shards:  78% Completed | 7/9 [00:26<00:07,  3.66s/it]
Loading safetensors checkpoint shards:  89% Completed | 8/9 [00:30<00:03,  3.74s/it]
Loading safetensors checkpoint shards: 100% Completed | 9/9 [00:32<00:00,  3.09s/it]
Loading safetensors checkpoint shards: 100% Completed | 9/9 [00:32<00:00,  3.56s/it]

INFO 06-26 14:42:05 model_runner.py:1115] Loading model weights took 37.0968 GB
INFO 06-26 14:42:09 worker.py:267] Memory profiling takes 4.11 seconds
INFO 06-26 14:42:09 worker.py:267] the current vLLM instance can use total_gpu_memory (79.25GiB) x gpu_memory_utilization (0.90) = 71.33GiB
INFO 06-26 14:42:09 worker.py:267] model weights take 37.10GiB; non_torch_memory takes 0.02GiB; PyTorch activation peak memory takes 1.25GiB; the rest of the memory reserved for KV Cache is 32.97GiB.
INFO 06-26 14:42:09 executor_base.py:111] # cuda blocks: 6751, # CPU blocks: 819
INFO 06-26 14:42:09 executor_base.py:116] Maximum concurrency for 5120 tokens per request: 21.10x
INFO 06-26 14:42:12 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|                                                                                                             | 0/35 [00:00<?, ?it/s]Capturing CUDA graph shapes:   3%|██▉                                                                                                  | 1/35 [00:00<00:30,  1.11it/s]Capturing CUDA graph shapes:   6%|█████▊                                                                                               | 2/35 [00:01<00:28,  1.16it/s]Capturing CUDA graph shapes:   9%|████████▋                                                                                            | 3/35 [00:02<00:26,  1.19it/s]Capturing CUDA graph shapes:  11%|███████████▌                                                                                         | 4/35 [00:03<00:25,  1.21it/s]Capturing CUDA graph shapes:  14%|██████████████▍                                                                                      | 5/35 [00:04<00:24,  1.23it/s]Capturing CUDA graph shapes:  17%|█████████████████▎                                                                                   | 6/35 [00:04<00:23,  1.24it/s]Capturing CUDA graph shapes:  20%|████████████████████▏                                                                                | 7/35 [00:05<00:22,  1.25it/s]Capturing CUDA graph shapes:  23%|███████████████████████                                                                              | 8/35 [00:06<00:21,  1.26it/s]Capturing CUDA graph shapes:  26%|█████████████████████████▉                                                                           | 9/35 [00:07<00:20,  1.30it/s]Capturing CUDA graph shapes:  29%|████████████████████████████▌                                                                       | 10/35 [00:07<00:19,  1.32it/s]Capturing CUDA graph shapes:  31%|███████████████████████████████▍                                                                    | 11/35 [00:08<00:17,  1.34it/s]Capturing CUDA graph shapes:  34%|██████████████████████████████████▎                                                                 | 12/35 [00:09<00:16,  1.36it/s]Capturing CUDA graph shapes:  37%|█████████████████████████████████████▏                                                              | 13/35 [00:10<00:15,  1.38it/s]Capturing CUDA graph shapes:  40%|████████████████████████████████████████                                                            | 14/35 [00:10<00:15,  1.39it/s]Capturing CUDA graph shapes:  43%|██████████████████████████████████████████▊                                                         | 15/35 [00:11<00:14,  1.41it/s]Capturing CUDA graph shapes:  46%|█████████████████████████████████████████████▋                                                      | 16/35 [00:12<00:13,  1.42it/s]Capturing CUDA graph shapes:  49%|████████████████████████████████████████████████▌                                                   | 17/35 [00:12<00:12,  1.47it/s]Capturing CUDA graph shapes:  51%|███████████████████████████████████████████████████▍                                                | 18/35 [00:13<00:11,  1.49it/s]Capturing CUDA graph shapes:  54%|██████████████████████████████████████████████████████▎                                             | 19/35 [00:14<00:10,  1.52it/s]Capturing CUDA graph shapes:  57%|█████████████████████████████████████████████████████████▏                                          | 20/35 [00:14<00:09,  1.54it/s]Capturing CUDA graph shapes:  60%|████████████████████████████████████████████████████████████                                        | 21/35 [00:15<00:08,  1.57it/s]Capturing CUDA graph shapes:  63%|██████████████████████████████████████████████████████████████▊                                     | 22/35 [00:15<00:08,  1.56it/s]Capturing CUDA graph shapes:  66%|█████████████████████████████████████████████████████████████████▋                                  | 23/35 [00:16<00:07,  1.59it/s]Capturing CUDA graph shapes:  69%|████████████████████████████████████████████████████████████████████▌                               | 24/35 [00:17<00:06,  1.61it/s]Capturing CUDA graph shapes:  71%|███████████████████████████████████████████████████████████████████████▍                            | 25/35 [00:17<00:05,  1.67it/s]Capturing CUDA graph shapes:  74%|██████████████████████████████████████████████████████████████████████████▎                         | 26/35 [00:18<00:05,  1.72it/s]Capturing CUDA graph shapes:  77%|█████████████████████████████████████████████████████████████████████████████▏                      | 27/35 [00:18<00:04,  1.77it/s]Capturing CUDA graph shapes:  80%|████████████████████████████████████████████████████████████████████████████████                    | 28/35 [00:19<00:03,  1.81it/s]Capturing CUDA graph shapes:  83%|██████████████████████████████████████████████████████████████████████████████████▊                 | 29/35 [00:19<00:03,  1.85it/s]Capturing CUDA graph shapes:  86%|█████████████████████████████████████████████████████████████████████████████████████▋              | 30/35 [00:20<00:02,  1.89it/s]Capturing CUDA graph shapes:  89%|████████████████████████████████████████████████████████████████████████████████████████▌           | 31/35 [00:20<00:02,  1.92it/s]Capturing CUDA graph shapes:  91%|███████████████████████████████████████████████████████████████████████████████████████████▍        | 32/35 [00:21<00:01,  1.94it/s]Capturing CUDA graph shapes:  94%|██████████████████████████████████████████████████████████████████████████████████████████████▎     | 33/35 [00:21<00:01,  1.95it/s]Capturing CUDA graph shapes:  97%|█████████████████████████████████████████████████████████████████████████████████████████████████▏  | 34/35 [00:22<00:00,  1.96it/s]Capturing CUDA graph shapes: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████| 35/35 [00:22<00:00,  1.97it/s]Capturing CUDA graph shapes: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████| 35/35 [00:22<00:00,  1.53it/s]
INFO 06-26 14:42:35 model_runner.py:1562] Graph capturing finished in 23 secs, took 0.47 GiB
INFO 06-26 14:42:35 llm_engine.py:436] init engine (profile, create kv cache, warmup model) took 30.17 seconds
Processing items: 0it [00:00, ?it/s]Processing items: 1it [04:57, 297.36s/it]Processing items: 2it [05:00, 124.28s/it]Processing items: 11it [05:00, 14.55s/it]Processing items: 21it [05:10,  6.61s/it]Processing items: 22it [05:10,  6.12s/it]Processing items: 29it [05:10,  3.46s/it]Processing items: 33it [05:10,  2.56s/it]Processing items: 39it [05:10,  1.65s/it]Processing items: 57it [05:11,  1.53it/s]Processing items: 64it [05:11,  2.00it/s]Processing items: 64it [05:24,  2.00it/s]Processing items: 65it [09:54, 14.34s/it]Processing items: 66it [09:57, 13.61s/it]Processing items: 70it [09:58,  9.93s/it]Processing items: 79it [09:58,  5.31s/it]Processing items: 85it [10:07,  4.14s/it]Processing items: 88it [10:07,  3.40s/it]Processing items: 95it [10:07,  2.13s/it]Processing items: 99it [10:07,  1.64s/it]Processing items: 124it [10:08,  1.86it/s]Processing items: 128it [10:24,  1.86it/s]Processing items: 129it [14:49,  9.55s/it]Processing items: 130it [14:52,  9.27s/it]Processing items: 149it [15:01,  4.48s/it]Processing items: 170it [15:01,  2.41s/it]Processing items: 182it [15:02,  1.75s/it]Processing items: 192it [15:14,  1.75s/it]Processing items: 193it [19:45,  8.11s/it]Processing items: 194it [19:49,  7.95s/it]Processing items: 213it [19:57,  4.40s/it]Processing items: 217it [19:58,  3.86s/it]Processing items: 223it [19:58,  3.05s/it]Processing items: 229it [19:58,  2.35s/it]Processing items: 234it [19:58,  1.85s/it]Processing items: 241it [19:58,  1.30s/it]Processing items: 256it [20:14,  1.30s/it]Processing items: 257it [24:42,  9.46s/it]Processing items: 258it [24:45,  9.19s/it]Processing items: 265it [24:46,  6.47s/it]Processing items: 277it [24:55,  4.09s/it]Processing items: 285it [24:56,  2.92s/it]Processing items: 290it [24:56,  2.33s/it]Processing items: 298it [24:56,  1.59s/it]Processing items: 309it [24:56,  1.01it/s]Processing items: 320it [25:07,  1.01it/s]Processing items: 321it [29:55,  9.95s/it]Processing items: 322it [29:58,  9.66s/it]Processing items: 328it [29:58,  7.09s/it]Processing items: 331it [29:59,  5.96s/it]Processing items: 341it [30:08,  3.77s/it]Processing items: 351it [30:08,  2.34s/it]Processing items: 376it [30:08,  1.01it/s]Processing items: 384it [30:24,  1.01it/s]Processing items: 385it [34:52,  7.99s/it]Processing items: 386it [34:56,  7.82s/it]Processing items: 393it [34:56,  5.80s/it]Processing items: 404it [34:56,  3.67s/it]Processing items: 411it [35:05,  3.06s/it]Processing items: 425it [35:05,  1.79s/it]Processing items: 434it [35:05,  1.30s/it]Processing items: 445it [35:05,  1.14it/s]Processing items: 448it [35:17,  1.14it/s]Processing items: 449it [39:49, 11.04s/it]Processing items: 450it [39:52, 10.65s/it]Processing items: 456it [39:52,  7.50s/it]Processing items: 469it [40:02,  4.25s/it]Processing items: 474it [40:02,  3.38s/it]Processing items: 482it [40:02,  2.29s/it]Processing items: 493it [40:02,  1.41s/it]Processing items: 508it [40:02,  1.24it/s]Processing items: 512it [40:14,  1.24it/s]Processing items: 513it [44:47, 10.36s/it]Processing items: 514it [44:50, 10.02s/it]Processing items: 533it [45:00,  4.73s/it]Processing items: 536it [45:01,  4.21s/it]Processing items: 554it [45:01,  2.16s/it]Processing items: 574it [45:01,  1.22s/it]Processing items: 576it [45:14,  1.22s/it]Processing items: 577it [49:47,  9.28s/it]Processing items: 578it [49:50,  9.04s/it]Processing items: 585it [49:50,  6.50s/it]Processing items: 592it [49:51,  4.64s/it]Processing items: 599it [50:00,  3.67s/it]Processing items: 605it [50:00,  2.71s/it]Processing items: 617it [50:00,  1.56s/it]Processing items: 625it [50:00,  1.12s/it]Processing items: 635it [50:00,  1.35it/s]Processing items: 640it [50:14,  1.35it/s]Processing items: 641it [54:42, 11.19s/it]Processing items: 642it [54:45, 10.79s/it]Processing items: 646it [54:45,  8.36s/it]Processing items: 661it [54:55,  4.14s/it]Processing items: 666it [54:55,  3.29s/it]Processing items: 682it [54:56,  1.70s/it]Processing items: 694it [54:56,  1.12s/it]Processing items: 702it [54:56,  1.18it/s]Processing items: 704it [55:08,  1.18it/s]Processing items: 705it [59:39, 11.72s/it]Processing items: 706it [59:42, 11.27s/it]Processing items: 713it [59:42,  7.40s/it]Processing items: 723it [59:42,  4.35s/it]Processing items: 729it [59:52,  3.63s/it]Processing items: 750it [59:52,  1.58s/it]Processing items: 758it [59:52,  1.21s/it]Processing items: 768it [1:00:05,  1.21s/it]Processing items: 769it [1:04:39,  9.07s/it]Processing items: 770it [1:04:42,  8.84s/it]Processing items: 787it [1:04:42,  4.52s/it]Processing items: 793it [1:04:51,  3.92s/it]Processing items: 824it [1:04:51,  1.60s/it]Processing items: 833it [1:05:05,  4.69s/it]
Number of dead features: 1756
Number of interpreted live features: 83300
min examples 200
Number of features below the interpretation firing count threshold: 2985

--- Detection Metrics ---
Class-Balanced Accuracy: 0.766
F1 Score: 0.765
Frequency-Weighted F1 Score: 0.631
Note: the frequency-weighted F1 score is computed over each hookpoint and averaged
Precision: 0.768
Recall: 0.762
Logits not available.
Average fraction of failed examples: 0.0

Confusion Matrix:
True Positive Rate:  0.762 (31691)
True Negative Rate:  0.770 (32002)
False Positive Rate: 0.230 (9578)
False Negative Rate: 0.238 (9879)

Class Distribution:
Positives: 41570
Negatives: 41580
Total: 83150
[rank0]:[W626 15:47:47.491441077 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
